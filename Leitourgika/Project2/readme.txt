AM:1115201200049 Γιώργος Καλογερόπουλος
Η εργασία δουλεύτηκε πάνω σε ubuntu 16.04.Για την μετα-γλώτιση απλά make από το terminal και δημιουργούνται τα 4
εκτελέσιμα myleaf,splitNmerge και leaf και root.
Για την επικοινωνία μεταξύ των κόμβων χρησιμοποίησα
name pipes.Ξεκινόντας από την root δημιουργώ τον πρώτο 
splitNmerge κόμβο και έπειτα κάθε κόμβος δημιουργεί δύο
παιδιά ,άρα και δυο pipes που επικοινωνεί με το καθένα.
Εφόσον βρισκόμαστε για depth=1 τότε δημιουργόυνται τα leafs.
Ουστιαστικά κάθε παιδί επικοινωνεί με ένα pipe με τον γονιό και του περνάει τα δεδομένα.
Χρησιμοποιήσα την execvp μετά από κάθε fork και τρέξει ο κατάλληλος κώδικας καθώς και για να περνάνε τα κατάλληλα ορίσματα.
Χωρίς το flag -s  οι searchers ψάχνουν σε ίσα κομμάτια για να βρουν το pattern.
Με το flag -s περνάω στο τελευταίο splitNmerge κόμβο που θα δημιουργήσει το laef έχω περάσει ένα counter και αναγνωρίζει το counter του παιδιού.(Πχ 1ο,2ο,3ο κλπ).Σύμφωνα με τον τύπο που έχει δωθεί από την εκφώνηση υπολογίζει το διαστήμα που πρέπει να τρέξει το παιδί και τα περνάει σαν όρισμα στην κλήση του leaf.
Για το διάβασμα από το pipes χρησιμοποιώ απλά read/write χωρίς κάποιο flag.Έτσι κάθε γονιός μπλοκάρει στο read μέχρι να διαβάσει κάθε παιδί.
Διαβάζω από το binary αρχείο σύμφωνα με αυτό που έχει δωθεί σαν παράδειγμα από το μάθημα.
Τέλος γράφω στο pipe record-record καθώς και διαβάζω από το pipe record record.Για να μπορώ να περάσω και τo info node που χρειάζεται να περάσει ο κάθε searcher έχω χρησιμοποιήσει μια δομή ίδια με την ζητόυμενη απλά με extra πεδίο ένα lastflag που δηλώνει ότι είναι η τελευταία εγγραφή που γράφτηκε και ακολουθεί το info node για να περάσουν τα στατιστικά.
Tα αποτελέσματα για τις εγγραφές τα περνάω σε ένα αρχείο results.cvs και μετά καλώ στην sort με την system και τα αποθηκεύω στο αρχείο sorted.cvs.